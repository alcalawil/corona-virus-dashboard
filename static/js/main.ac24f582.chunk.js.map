{"version":3,"sources":["components/card.jsx","components/stats.jsx","components/datePicker.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","name","count","type","console","log","cardTypeStyle","className","Stats","props","stats","total_infections","total_deaths","new_cases","new_deaths","useStyles","makeStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","width","DatePicker","onDateChange","defaultDate","classes","noValidate","TextField","id","label","format","defaultValue","InputLabelProps","shrink","onChange","event","target","value","App","useState","dailyStats","setDailyStats","date","setDate","fetchData","a","axios","response","data","message","setInterval","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"uSAgBeA,G,MAdF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC3BC,QAAQC,IAAI,OAAQH,EAAOD,GAC3B,IAAMK,EAAa,uBAAmBH,GACtC,OACE,yBAAKI,UAAU,YACb,yBAAKA,UAAWD,GACd,uBAAGC,UAAU,oBACb,0BAAMA,UAAU,cAAcN,GAC9B,0BAAMM,UAAU,iBAAiBL,OCS1BM,EAhBD,SAAAC,GAAU,IAAD,EAC6CA,EAAMC,MAAhEC,EADa,EACbA,iBAAkBC,EADL,EACKA,aAAcC,EADnB,EACmBA,UAAWC,EAD9B,EAC8BA,WACnD,OACE,6BACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,CAAMN,KAAK,oBAAoBC,MAAOW,EAAWV,KAAK,YACtD,kBAAC,EAAD,CAAMF,KAAK,iBAAiBC,MAAOY,EAAYX,KAAK,aAEtD,yBAAKI,UAAU,OACb,kBAAC,EAAD,CAAMN,KAAK,mBAAmBC,MAAOS,EAAkBR,KAAK,SAC5D,kBAAC,EAAD,CAAMF,KAAK,gBAAgBC,MAAOU,EAAcT,KAAK,c,0CCRvDY,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,UAAW,CACTC,QAAS,OACTC,SAAU,QAEZC,UAAW,CACTC,WAAYL,EAAMM,QAAQ,GAC1BC,YAAaP,EAAMM,QAAQ,GAC3BE,MAAO,SAyBIC,EArBI,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAC5BC,EAAUd,IAEhB,OACE,0BAAMR,UAAWsB,EAAQX,UAAWY,YAAU,GAC5C,kBAACC,EAAA,EAAD,CACEC,GAAG,OACHC,MAAM,QACN9B,KAAK,OACL+B,OAAO,aACPC,aAAcP,EACdrB,UAAWsB,EAAQR,UACnBe,gBAAiB,CACfC,QAAQ,GAEVC,SAAU,SAAAC,GAAK,OAAIZ,EAAaY,EAAMC,OAAOC,YCmBtCC,MA3Cf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNC,EADM,KACMC,EADN,OAEWF,mBAAS,cAFpB,mBAENG,EAFM,KAEAC,EAFA,KAGPC,EAAS,uCAAG,8BAAAC,EAAA,+EAESC,IACrB,sDAHY,OAERC,EAFQ,OASd/C,QAAQC,IAAIyC,EAAMK,EAASC,MACrBR,EAAaO,EAASC,KAAKN,IAAS,GAC1C1C,QAAQC,IAAIuC,GACZC,EAAcD,GAZA,kDAcdxC,QAAQC,IAAI,KAAIgD,SAdF,0DAAH,qDA+Bf,OAXAC,YAAYN,EAFC,OAIbO,qBAAU,WACRP,MACC,CAACF,IAQF,yBAAKvC,UAAU,OACb,kBAAC,EAAD,CAAYoB,aAPK,SAACmB,GACpBC,EAAQD,GACR1C,QAAQC,IAAIyC,IAK8BlB,YAAakB,IACrD,kBAAC,EAAD,CAAOpC,MAAOkC,IACd,8BAAOE,KClCOU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrE,QAAQqE,MAAMA,EAAMpB,c","file":"static/js/main.ac24f582.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, count, type }) => {\n  console.log(\"card\", count, name);\n  const cardTypeStyle = `card-counter ${type}`;\n  return (\n    <div className=\"col-md-3\">\n      <div className={cardTypeStyle}>\n        <i className=\"fa fa-code-fork\"></i>\n        <span className=\"count-name\">{name}</span>\n        <span className=\"count-numbers\">{count}</span>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./card\";\n\nconst Stats = props => {\n  const { total_infections, total_deaths, new_cases, new_deaths } = props.stats;\n  return (\n    <div>\n      <div className=\"row\">\n        <Card name=\"Nuevos Infectados\" count={new_cases} type=\"primary\" />\n        <Card name=\"Nuevos muertos\" count={new_deaths} type=\"success\" />\n      </div>\n      <div className=\"row\">\n        <Card name=\"Total Infectados\" count={total_infections} type=\"info\" />\n        <Card name=\"Total muertos\" count={total_deaths} type=\"danger\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Stats;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport moment from \"moment\";\n\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: 200\n  }\n}));\n\nconst DatePicker = ({ onDateChange, defaultDate }) => {\n  const classes = useStyles();\n\n  return (\n    <form className={classes.container} noValidate>\n      <TextField\n        id=\"date\"\n        label=\"Fecha\"\n        type=\"date\"\n        format=\"YYYY-MM-DD\"\n        defaultValue={defaultDate}\n        className={classes.textField}\n        InputLabelProps={{\n          shrink: true\n        }}\n        onChange={event => onDateChange(event.target.value)}\n      />\n    </form>\n  );\n};\n\nexport default DatePicker;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Stats from \"./components/stats\";\nimport Charts from \"./components/charts\";\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport DatePicker from \"./components/datePicker\";\n\nfunction App() {\n  const [dailyStats, setDailyStats] = useState({});\n  const [date, setDate] = useState(\"2020-03-28\");\n  const fetchData = async () => {\n    try {\n      const response = await axios(\n        \"https://argentina-covid19-data.now.sh/api/v0/daily\"\n      );\n\n      // const date = moment()\n      //   .subtract(1, \"day\")\n      //   .format(\"YYYY-MM-DD\");\n      console.log(date, response.data);\n      const dailyStats = response.data[date] || {};\n      console.log(dailyStats);\n      setDailyStats(dailyStats);\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n\n  const aDay = 86400000;\n\n  setInterval(fetchData, aDay);\n\n  useEffect(() => {\n    fetchData();\n  }, [date]);\n\n  const onDateChange = (date) => {\n    setDate(date);\n    console.log(date);\n  };\n\n  return (\n    <div className=\"App\">\n      <DatePicker onDateChange={onDateChange} defaultDate={date} />\n      <Stats stats={dailyStats} />\n      <span>{date}</span>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}